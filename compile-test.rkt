#lang racket
(require rackunit (except-in racket/control set)
         racket/async-channel
         "parse.rkt" "compile.rkt" "runtime.rkt" "bi.rkt"
         "toplevel.rkt" mzlib/os)

(provide (all-defined-out))

(define-namespace-anchor gosh-test-anchor)
(define gosh-test-ns (namespace-anchor->namespace gosh-test-anchor))

(define (to-string x) (format "~s" x))

;; (define (expand glist)
;;   (define (expand-aux glist)
;;     (let ([expanded (.gexpand glist)])
;;       (cond [(empty? expanded) expanded]
;;             [(or (mpair? expanded) (pair? expanded))
;;              (mcons (expand-aux (.ghead expanded))
;;                     (expand-aux (.gtail expanded)))]
;;             [else expanded])))
;;   (expand-aux glist))

;; (define (seq->list seq)
;;   (cond [(empty? seq) '()]
;;         [(mpair? seq) (cons (expand (mcar seq))
;;                             (seq->list (expand (mcdr seq))))]
;;         [(pair? seq) (cons (expand (car seq))
;;                            (seq->list (expand (cdr seq))))]
;;         [else seq]))

(define (colon-single-value str)
  (.gosh-sprint (first (grun str 'colon))))
(define (colon-all-values str)
  (.gosh-sprint (grun str 'colon)))
(define (dot-single-value str)
  (.gosh-sprint (first (grun str 'default))))
(define (dot-all-values str)
  (.gosh-sprint (grun str 'default)))

(define (grun str mode)
  ;; (pprint #t)
  (adjust-return-code)
  (cond ((eqv? (string-ref str 0) #\:)
         (set! mode 'colon))
        ((eq? mode 'colon)
         (set! str (string-append ":" str "."))))
  (let* ([results (new-arg)]
         [a (new-arg)]
         [exp
          (parameterize [(compile-allow-set!-undefined #t)
                         (current-exp-string str)
                         (print-as-expression #f)
                         (current-directory .pwd)]
            `(let ([,results '()])
               (parameterize [(current-custodian (make-custodian))]
                 ,(gosh-compile
                   (gosh str mode)
                   `(lambda (,a) (set! ,results (cons ,a ,results))))
                 (custodian-shutdown-all (current-custodian)))
               (reverse ,results)))])
    (when (pprint)
      (pretty-print exp)
      (pretty-print (simplify exp)))
    (parameterize [(compile-allow-set!-undefined #t)
                   (.gosh-loader gosh-load)]
                  (let ([final-result (eval exp gosh-test-ns)])
                    final-result))))
                    ;; (map (lambda (r)
                    ;;        (if (mpair? r)
                    ;;            (seq->list r)
                    ;;            r))
                    ;;      final-result)))))

(define-binary-check (check-gosh-equal? .gosh-equal? x y))

(define make-ensures
   (let ([current-ensure 0])
     (lambda (mode)
       (define (perform-check result exp vars mode)
         (parameterize
             [(.free-vars (if (empty? vars)
                              (make-hash)
                              (make-hash
                               (map (lambda (l)
                                      (cons (string->symbol
                                             (string-append
                                              "<toplevel>.."
                                              (symbol->string (first l))))
                                            (second l)))
                                    vars))))]
           (if (eq? result 'error)
               (if (list? exp)
                   (check-exn exn:fail? (lambda () (last (map (lambda (e) (grun e mode)) exp))))
                   (check-exn exn:fail? (lambda () (grun exp mode))))
               (if (list? exp)
                   (check-gosh-equal? (last (map (lambda (e) (grun e mode)) exp))
                                      result
                                      (format "~s" exp))
                   (check-gosh-equal? (grun exp mode) result exp)))))
         (values
          (lambda (result exp . vars)
            (when (getenv "PRINT_TESTS")
              (printf "ENSURE: ~s <- ~a~%" result exp))
            (perform-check result exp vars mode)
            (set! current-ensure (add1 current-ensure))
            (when (getenv "PRINT_TESTS")
              (printf "ENSURED(~s): ~s~%" current-ensure result)))
          (lambda (result exp . vars)
            (parameterize ([pprint #t])
              (perform-check result exp vars mode)))))))

(define-values (ensure ensurep) (make-ensures 'colon))
(define-values (ensure-shell ensure-shellp) (make-ensures 'default))

(define test-dir-base "/tmp/compile6_28_496_test_dir")
(define test-dir2-base "/tmp/compile8128_test_dir/guh")
(define (test-dir dir) (string-join (list test-dir-base dir) "/"))
(define (test-dir2 dir) (string-join (list test-dir2-base dir) "/"))
(define (test-dir-match dir) (format "~~\"~a\"" (test-dir dir)))
(define (test-dir2-match dir) (format "~~\"~a\"" (test-dir2 dir)))
(define (initialize-test-dirs)
  (when (directory-exists? test-dir-base)
        (delete-directory/files test-dir-base))
  (when (directory-exists? test-dir2-base)
        (delete-directory/files test-dir2-base))
  (make-directory* test-dir-base)
  (make-directory* test-dir2-base)
  (make-directory* (test-dir "jerry/jackson"))
  (display-to-file 628 (test-dir "jerry/jackson/yow"))
  (make-directory* (test-dir "jerry/jackson/not/jacka"))
  (display-to-file 496 (test-dir2 "foobad"))
  (display-to-file 496 (test-dir2 "foogolight"))
  (display-to-file 496 (test-dir2 "foogolightly"))
  (display-to-file 496 (test-dir2 "foogot"))
  (display-to-file 496 (test-dir2 "golight"))
  (display-to-file 496 (test-dir2 "got")))

(module+ test
(check-gosh-equal? (gosh ":3." 'colon) 3 "number parsing")
(ensure '(12) "3*4")
(ensure '(27) "3*(4+5)")
(ensure '(9) "3*(4>3)")
(ensure '() "3*(4<3)")
(ensure '(9) "(4>3)*3")
(ensure '() "(4<3)*3")
(ensure '(-28) "2*-14")
(ensure '(4 5) "(4||5)")
(ensure '(4 5 6) "(4||5||6)")
(ensure '(4 5 4 5) "(3||4)&&(4||5)")
(ensure '(4 5) "(2>3||4)&&(4||5)")
(ensure '((3 4 5 6 8)) "@*(3||4||5||6||7&&8)")
(ensure '((3 4 5 6 8)) "@(3||4||5||6||7&&8)")
(ensure '(3) "`(3||4||5||6||7&&8)")
(ensure '(4 4) "(3||4)&&`(4||5)")
(ensure '(4) "(4|||5)")
(ensure '(4 5) "(4||5|||6)")
(ensure '(4 6) "((4|||5)||6)")
(ensure '(4 5) "(3|||4)&&(4||5)")
(ensure '(4 5) "(2>3|||4)&&(4||5)")
(ensure '(3) "`(3|||4|||5|||6|||7&&8)")
(ensure '(4 4) "(3||4)&&`(4|||5)")
(ensure '((3 4 5)) "[3,4,5]")
(ensure '((3 4 6) (3 5 6) (4 4 6) (4 5 6)) "[(3||4),(4||5),6]")
(ensure '(6 28) "^[3, 14]*2")
(ensure '(17) "^^^^```@*@*@*@*```(3*4+5)")
(ensure '(17) "^^^^```@@@@```(3*4+5)")
(ensure '(1 2 3) "`($n < 2) && ^[1,2,3]" '(n 1))
(ensure '(1 2 3) "if $n < 2 then ^[1,2,3] fi" '(n 1))
(ensure '() "if $n < 2 then ^[1,2,3] fi" '(n 2))
(ensure '(1 2 3) "if $n < (2 || 3) then ^[1,2,3] fi" '(n 1))
(ensure '() "if $n < (2 || 1) then ^[1,2,3] fi" '(n 2))
(ensure '(1 2 3) "if $n < (2 || 3) then ^[1,2,3] else ^[4,5,6] fi" '(n 1))
(ensure '(4 5 6) "if $n < (2 || 1) then ^[1,2,3] else ^[4,5,6] fi" '(n 2))
(ensure '(4 5 6) "if $n < 2 then ^[1,2,3] elif $n < 3 then ^[4,5,6] else ^[7,8,9] fi" '(n 2))
(ensure '(7 8 9) "if $n < 2 then ^[1,2,3] elif $n < 3 then ^[4,5,6] else ^[7,8,9] fi" '(n 3))
(ensure '(#hash(("x" . 6))) "6 ~> $x")
(ensure '(#hash(("x" . 6))) "6 ~> $x when 4")
(ensure '(28) "6 in % + 22")
(ensure '(4) "2 in % in % + %%")
(ensure '(4) "2 in % in %*%% in %%*%%%")
(ensure '(8) "2 in % in %*%% in %*%%")
(ensure '(8) "2 in 4 in %*%%")
(ensure '(16) "2 in % * % in % * %")
;(ensure '(6) "3 > 2; 4; 6")
;(ensure '(6) "3 < 2; 4; 6")
(ensure '(28) "6 ~> $x in $x + 22")
(ensure '(6) "(5||6) when % rem 2 == 0")
(ensure '(28) "(5||6) when % rem 2 == 0 in % + 22")
(ensure '(26) "(4||5||6) while % rem 2 == 0 in % + 22")
(ensure '(28) "(5||6) ~> $x when $x rem 2 == 0 in $x + 22")
(ensure '(4 6) "(4||5||6) ~> $x when $x rem 2 == 0 in $x")
(ensure '(4) "(4||5||6) ~> $x while $x rem 2 == 0 in $x")
(ensure '(28) "[2, 14] ~> [$a, $b] in $a * $b")
(ensure '(()) "[] ~> [...] in %")
(ensure '((6 28)) "[6, 28] ~> [...] in %")
(ensure '((6 28)) "[6, 28] ~> [6, ...] in %")
(ensure '((6 28)) "[6, 28] ~> [6, 28, ...] in %")
(ensure '() "[6, 28] ~> [28, ...] in %")
(ensure '(#(6 28)) "(6, 28) ~> (...) in %")
(ensure '(#(6 28)) "(6, 28) ~> (6, ...) in %")
(ensure '(#(6 28)) "(6, 28) ~> (6, 28, ...) in %")
(ensure '() "(6, 28) ~> (28, ...) in %")
(ensure '((7 14)) "[1, 2, 4, 7, 14] ~> [$a, $b, $c . $d] in $d")
(ensure '((7 14)) "[1, 2, 4, 7, 14] ~> [_, _, _ . $d] in $d")
(ensure '((7 14)) "[1, 2, 4, 7, 14] ~> [1, _, _ . $d] in $d")
(ensure '((7 14)) "[1, a, 4, 7, 14] ~> [1, a, _ . $d] in $d")
(ensure '() "[1, a, 4, 7, 14] ~> [1, b, _ . $d] in $d")
(ensure '((7 14)) "[1, a, \"foo\", 7, 14] ~> [1, a, \"foo\" . $d] in $d")
(ensure '() "[1, a, \"foo\", 7, 14] ~> [1, a, \"fooz\" . $d] in $d")
(ensure '((7 14)) "[x, [1, a, \"foo\", 7, 14], y] ~> [_, [1, a, \"foo\" . $d], _] in $d")
(ensure '(7 15) "[1, a, \"foo\", 7, 14, 15] ~> [1, a, \"foo\" . $d] in ^$d when % rem 2 > 0")
(ensure '(7) "[1, a, \"foo\", 7, 14, 15] ~> [1, a, \"foo\" . $d] in ^$d while % rem 2 > 0")
(ensure '(1 1 2 3 5 8 13) "1::1::%1+%2 while % < 21")
(ensure '(1 1 3 5 13 21 55 89) "(1::1::%1+%2 when % rem 2 > 0) while % < 100")
(ensure '(28) "28 when !(3 < 2)")
(ensure '((1 2 3 4 5)) " ==> $ones <- @*(1||1 + (^$ones while % < 5))")
(ensure '((2 3 5 7 11 13 17))
       " ==> $primes <- @*(2||((3::%1+2 ~> $x when !(^$primes ~> $p while $p * $p <= $x in $x rem $p == 0))[x] while $x < 19))")
(ensure '((2 3 5 7 11 13 17))
        " ==> $primes <- @*(2||((3::%1+2 ~> $x when !(^$primes ~> $p while $p * $p <= $x in $x rem $p == 0)) in %) while % < 19)")
(ensure '((2 3 5 7 11 13 17))
        " ==> $p <- @*(2||3::%1+2 when !(% rem (^$p while % * % <= %%) == 0) while % < 19)")
(ensure '(4) "sqrt[16]")
(ensure '((1 2 3)) "reverse[[3,2,1]]")
(ensure '(25) "sqrt[head[reverse[[1, 2, 625]]]]")
(ensure '(11) "(==> $p <- @*(2||3::%1+2 when !(% rem (^$p while % * % <= %%) == 0))) ~> [_, _, _, _, $eleven . _] in $eleven")
(ensure '(6) '("=! x[] -> 6" "x[]"))
(ensure '(28) '("=! y[$a] -> 6+$a" "y[22]"))
(ensure '(6 28) '("=! y[$a, $b] -> $a||$b" "y[6, 28]"))
(ensure '(6 28 (496)) '("=! z[$a, $b . $c] -> $a||$b||$c" "z[6, 28, 496]"))
(ensure '(28) '("=! q $args -> $args ~> [$x, $y] in $x + $y"
                "q[14, 14]"))
(ensure '(8) '("=! fib[$n] -> fib[$n - 2] + fib[$n - 1]" "=! fib[0] -> 1" "=! fib[1] -> 1" "fib[5]"))
(ensure '(6 28 496) '("=! num[] -> 6" ">! num[] -> 28"
                      ">! num[] -> 496" "num[]"))
(ensure '(6 28 496) '("=! num[] -> 496" "<! num[] -> 28"
                      "<! num[] -> 6" "num[]"))
;; (ensure '("red" "blue" "green") '("=! color[] -> blue" "<! color[] -> red"
;;                       ">! color[] -> green" "=! color[] -> black"
;;                       "! color" "color[]"))
(ensure '("yellow" "orange" "purple")
        '("=! basecolor2[] -> black"
          "=! color2[] -> (yellow||orange||purple)"
          "<? color2[] -> basecolor2[] == (green||red||blue)"
          "color2[]"))
(ensure '("red")
        '("=! basecolor3[] -> red"
          "=! color3[] -> (yellow||orange||purple)"
          "<? color3[] -> basecolor3[] == (green||red||blue)"
          "color3[]"))
(ensure '("yellow" "orange" "purple")
        '("=! basecolor4[] -> black"
          "=! color4[] -> basecolor4[] == (green||red||blue)"
          ">? color4[] -> (yellow||orange||purple)"
          "color4[]"))
(ensure '("red")
        '("=! basecolor5[] -> red"
          "=! color5[] -> basecolor5[] == (green||red||blue)"
          ">? color5[] -> (yellow||orange||purple)"
          "color5[]"))
(ensure '(("red" "is" "the" "color") ("green" "is" "the" "color"))
        '("=! thecolor[] -> (red||blue||green)"
          "=! thecolor[] -> [next[] != blue, is, the, color]"
          "thecolor[]"))
(ensure '(4 6 496) '("=! foo[$x] when $x rem 2 == 0 -> $x"
                   "foo[^[4, 6, 9, 496]]"))
(ensure '((4 3)) "[3] ~> $x in [4 . $x]")
(ensure '((6 28)) "&[foo=>6, \"bar\"=>28] in [%[foo], %[\"bar\"]]")
(ensure '((6 28 496)) "[6, 28, 496] ~> $l in [$l[0], $l[1], $l[-1]]")
(ensure '((#\6 #\, #\6)) "\"6,28,496\" ~> $s in [$s[0], $s[1], $s[-1]]")
(ensure '(6 28) "(6=>28) in (%[0]||%[1])")
(ensure (list (association 6 28)) "^&[6=>28]")
(ensure '(496) "&[a=>1, b=>2, c=>496] in (% -= a -= b)[c]")
(ensure '(6 28) "&[] += (1=>6) += (2=>28) in (%[1]||%[2])")
(ensure '() "(&[])[x]")
(ensure '() "([])[x]")
(ensure '() "(1=>2)[x]")
(ensure '(#hash(("x" . 6) ("y" . 28))) "&[@]((x=>6) || (y=>28))")
(ensure '() "(1,2,3)[-4]")
(ensure '() "(1,2,3)[3]")
(ensure '(3) "(1,2,3)[-1]")
(ensure '(1) "(1,2,3)[0]")
(ensure '(3) "(1,2,3)[2]")
(ensure '(6) "(1,(6,28),3)[1,0]")
(ensure '(28) "(1,(6,28),3)[1,1]")
;; Set tests
(ensure `(,(set 6 28) ,(set 6 496)) "&{6,28||496}")
(ensure '() "(&{6})[28]")
(ensure `(,(set 6)) "(&{6})[6]")
(ensure `(,(set 6 28)) "&{6} += 28")
(ensure `(,(set 6 (association 28 496))) "&{6} += (28=>496)")
(ensure `(,(set "c")) "&{a,b,c} -= a -= b")
(ensure `(,(set "c")) "&{a,b,c} -= [a,b]")
(ensure `(,(set "c")) "&{a,b,c} -= &{a,b}")
(ensure `(,(set (set "c"))) "&{a,b,&{c}} -= &{a,b}")
(ensure `(,(set "a" "b")) "&{a,b,&{c}} -= [&{c}]")
(ensure `(,(set "a" "b")) "&{a,b,&{c}} -= &{&{c}}")
(ensure `(,(set "a" "b")) "&{a,b,4=>5} -= &[4=>5]")
(ensure `(,(set "a" "b")) "&{a,b,&[4=>5]} -= [&[4=>5]]")
(ensure '((1 3)) "[1,2,3] -= 2")
(ensure '((1 2 3)) "[1,2,3] -= 4")
(ensure '((2 3)) "[1,2,3] -= 1")
(ensure '((1 2)) "[1,2,3] -= 3")
(ensure '((1 2)) "[1,2,2] -= 2")
(ensure '(()) "[] -= 3")
(ensure 'error "5 -= 10")
(ensure '(#hash()) "&{} ~> &{}")
(ensure `(,(set 1 2 3)) "&{@}^[1,1,2,2,2,3,3,1,2,3]")
(ensure '("this is 6") "\"@\"(this||' '||is||' '||3*2)")
(ensure '(#\a #\b #\c) "?a to ?c")
(ensure '(#\a #\c) "?a to ?c by 2")
(ensure '("foobar") "\"fooba\" += ?r")
(ensure '(#hash(("x" . 6) ("y" . 28))) "[6,28] ~> [$x, $y]")
(ensure '((6 28)) "[6,28] ~> [$x, $y] in %")
(ensure '(28) "&[1=>6, 2=>28, 3=>496] ~> &[2=>$x, ...] in $x")
(ensure '(#hash(("x" . 28))) "&[1=>6, 2=>28, 3=>496] ~> &[2=>$x, ...]")
(ensure '(28) "&[1=>6, 2=>&[x=>28], 3=>496] ~> &[2=>&[x=>$x], ...] in $x")
(ensure '("6") "\"6,28,496\" ~> $'(?<$num>[\\\\d]+).*' in $num")
(ensure '("6") "\"6,28,496\" ~> $\"(?<\\$num>[\\\\d]+).*\" in $num")
(ensure '(("28" "6")) "\"6,28,496\" ~> $'(?<$num1>[\\\\d]+),(?<$num2>[\\\\d]+).*' in [$num2, $num1]")
(ensure '(6 28) '("=! fugu[] |> $x -> ^$x * 2" "(3||14) | fugu[]"))
(ensure '(12 56) '("=! oom[] |> $x -> ^$x * 2" "(3||14) | oom[] | oom[]"))
(ensure '(6) '("=! oomo[$x] |> -> ^% when % rem $x == 0" "(6||14||9) | oomo[3] | oomo[2]"))
(ensure '(28 6) '("=! gorp[] -> 6" "<! gorp[] |> $x -> ^$x * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(6 28) '("=! gorp[] -> 6" ">! gorp[] |> $x -> ^$x * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(28) '("=! gorp[] -> 6" "<? gorp[] |> $x -> ^$x * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(6) '("=! gorp[] -> 6" ">? gorp[] |> $x -> ^% * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(6 28) '("=! fugu[] ^|> $x -> $x * 2" "(3||14) | fugu[]"))
(ensure '(12 56) '("=! oom[] ^|> $x -> $x * 2" "(3||14) | oom[] | oom[]"))
(ensure '(6) '("=! oomo[$x] ^|> -> % when % rem $x == 0" "(6||14||9) | oomo[3] | oomo[2]"))
(ensure '(28 6) '("=! gorp[] -> 6" "<! gorp[] ^|> $x -> $x * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(6 28) '("=! gorp[] -> 6" ">! gorp[] ^|> $x -> $x * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(28) '("=! gorp[] -> 6" "<? gorp[] ^|> $x -> $x * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(6) '("=! gorp[] -> 6" ">? gorp[] ^|> $x -> % * 2 when % rem 7 == 0" "(6||14||9) | gorp[]"))
(ensure '(("bash"))
        '("=! twos[] |> -> ^% when % ~> $\"b.*sh\""
          "@(ls[\"/bin\"] | grep[\"bash\"] | sort[\"-r\"] | twos[])"))
(ensure '(("bash"))
        '("=! twos[] |> -> ^% when % ~> $\"b.*sh\""
          "@(ls['/bin'] | grep[bash] | sort['-r'] | twos[])"))
(ensure '(("bzop2"))
        '("=! twos[] |> -> ^% when % ~> $\".*2\""
          "=! ls $any -> bzop2"
          "@(ls['/bin'] | grep[bz] | sort['-r'] | twos[])"))
;; (ensure '(("bzip2"))
;;         '("=! twos[] |> -> ^% when % ~> $\".*2\""
;;           "=! ls $any -> bzop2"
;;           "@(ls[/bin] | grep[bz] | sort[-r] | twos[])"))
(ensure '(3) "*(x||y||z)")
(ensure '(#\f #\o #\o) "^\"foo\"")
(ensure '(#hash()) "\"foo.bar\" ~> \"**/foo.*\"")
(ensure '(#hash())
        "\"this/is/a/test\" ~> \"*h?s/**/t??t\"")
(ensure '()
        "\"this/is/a/test\" ~> '*h?s/**/t??t'")
(ensure '(#hash())
        "\"this/is/a/test\" ~> 'this/is/a/test'")
(ensure '(#hash()) "\"foo.bar\" ~> \"**/foo.*\"")
(ensure '() "\"fool.bar\" ~> \"**/foo.*\"")
(ensure '("this is a test") "\"this $(^[is, a, test])\"")
(ensure '("this is a test"
          "this is a disaster"
          "this is a fool's errand")
        "\"this is a $[^[test, disaster, \"fool's errand\"]]\"")
(ensure '("this is a test6") "\"this $:(^[is, a, test6])\"")
(ensure '("this is a test"
          "this is a disaster"
          "this is a fool's errand")
        "\"this is a $:[^[test, disaster, \"fool's errand\"]]\"")
(ensure '("this is a test") "\"this $(^[is, a, test])\"")
(ensure '("this is a test"
          "this is a disaster"
          "this is a fool's_errand")
        "\"this is a $[^[test, disaster, \"fool's_errand\"]]\"")

(ensure '("this is a test") "\"this $.(echo $:[^[is, a, test]])\"")
(ensure '("this is a test disaster fool's errand")
        "\"this is a $.(echo $:[^[test, disaster, \"fool's errand\"]])\"")
(ensure '("this is a test") "\"this $.(echo $:[^[is, a, test]])\"")
(ensure '("this is a test"
          "this is a disaster"
          "this is a fool's"
          "this is a errand")
        "\"this is a $.[echo $:[^[test, disaster, \"fool's errand\"]]]\"")
(ensure '("this is a test28") "\"this $(^[is, a, test28])\"")

(ensure-shell '("this is a test") "echo \"this $:(^[is, a, test])\"")
(ensure-shell '("this is a test"
          "this is a disaster"
          "this is a fool's errand")
        "echo \"this is a $:[^[test, disaster, \"fool's errand\"]]\"")
(ensure-shell '("this is a test") "echo \"this $(echo $:[^[is, a, test]])\"")
(ensure-shell '("this is a test") "echo \"this $.(echo $:[^[is, a, test]])\"")
(ensure-shell
 '("this is a test"
   "this is a disaster"
   "this is a fool's"
   "this is a errand")
 "echo \"this is a $[echo $:[^[test, disaster, \"fool's errand\"]]]\"")
(ensure-shell
 '("this is a test"
   "this is a disaster"
   "this is a fool's"
   "this is a errand")
 "echo \"this is a $.[echo $:[^[test, disaster, \"fool's errand\"]]]\"")
(ensure-shell '("1" "2" "3") "echo $:[1||2||3]")
(ensure-shell '("1 2 3") "echo $:(1||2||3)")
(ensure '("1" "2" "3") "$.[echo $:[1||2||3]]")
(ensure '(("1" "2" "3")) "$.(echo $:[1||2||3])")
(ensure '(("1 2 3")) "$.(echo $:(1||2||3))")
(ensure '((1 2 3)) "$(1||2||3)")
(ensure '(1 2 3) "$[1||2||3]")
(ensure '((1 2 3)) "$:(1||2||3)")
(ensure '(1 2 3) "$:[1||2||3]")
(ensure '(("quuxfoo")) "$.(echo quux$[echo foo])")
(ensure '("the") "^[this, that, the, other, thing] // 2")
(ensure '("thing") "^[this, that, the, other, thing] //*")
(ensure '("abc4:") "4 ~> $foo in \"abc$foo:\"")
(ensure '("abc41") "4 ~> $foo in \"abc${foo}1\"")
(ensure `((1 2 ,(set 3))) "[1, 2] += &{3}")
(ensure '((1 2 #hash((3 . 4)))) "[1, 2] += &[3=>4]")
(ensure '((1 (2 3))) "[1] += [2, 3]")
(ensure '((1 2 (3))) "[1, 2] += [3]")
(ensure '(((1 2 3))) "[] += [1, 2, 3]")
(ensure '((1 2 3 ())) "[1, 2, 3] += []")
(ensure '((1 2 3)) "[1] ++ [2, 3]")
(ensure '((1 2 3)) "[1, 2] ++ [3]")
(ensure '((1 2 3)) "[] ++ [1, 2, 3]")
(ensure '((1 2 3)) "[1, 2, 3] ++ []")
(ensure `(,(set #\a #\b #\c)) "&{} ++ \"abc\"")
(ensure '((#\a #\b #\c)) "[] ++ \"abc\"")
(ensure '("abc") "\"\" ++ \"abc\"")
(ensure '("foobar") "\"foo\" ++ \"bar\"")
(ensure `(,(set 1 2 3)) "&{} ++ [1, 2, 3]")
(ensure '((1 2 3)) "[1, 2] ++ &{3}")
(ensure `((1 2 ,(association 3 4))) "[1, 2] ++ &[3=>4]")
(ensure '((1 2 3)) "[] ++ [1, 2, 3]")
(ensure '((1 2 3)) "[1, 2, 3] ++ []")
(ensure '((1 2 3)) "[1, 2, 3] ++ &{}")
(ensure '((1 2 3)) "[1, 2, 3] ++ &[]")
(ensure `((1 2 3 ,(association 4 5))) "[1, 2, 3] ++ &[4=>5]")
(ensure `(,(set (association 4 5))) "&{} ++ &[4=>5]")
(ensure `(,(set "a" "b" "c")) "&{} ++ @^&{b,c,a}")
(ensure `(,(set 6 28)) "&{6} ++ [28]")
(ensure `(,(set 6 28)) "&{6} ++ &{28}")
(ensure `(,(set 6 (association 28 496))) "&{6} ++ &[28=>496]")
(ensure `(,(set 6 (association 28 496))) "&{6} ++ [28=>496]")
(ensure '(6 28) "&[] ++ [1=>6, 2=>28] in (%[1]||%[2])")
(ensure '(6 28) "&[] ++ &[1=>6, 2=>28] in (%[1]||%[2])")
(ensure '(10) "3 ~> $inc in (fun [$x] -> $x + $inc end)[7]")
(ensure '(10) "3 ~> $inc in fun [$x] -> $x + $inc end ~> $f in $f[7]")
(ensure '(24)
        "(fun fact[$n] -> if $n < 2 then 1 else fact[$n - 1] * $n fi end)[4]")
(ensure '((6 28) 6 28) "[1, 2, [6, 28]] ~> [_, _, $all=([$a, $b])] in ($all || $a || $b)")
(ensure '((3)) "{[$1]}[3, 4]")
(initialize-test-dirs)
(ensure (list (test-dir "jerry")) (test-dir-match "jerry"))
(ensure '() "~\"/home/jerryoejfwiejowfieowjfeof\"")
(ensure (list (test-dir "jerry")) (test-dir-match "jerry*"))
(ensure (list (test-dir "jerry")) (test-dir-match "jerr*"))
(ensure (list (test-dir "jerry")) (test-dir-match "jerr?"))
(ensure (list (test-dir "jerry")) (test-dir-match "j?r?y"))
(ensure (list (test-dir "jerry")) (test-dir-match "j*y"))
(ensure (list (test-dir "jerry")) (test-dir-match "j*r*y"))
(ensure (list (test-dir "jerry")) (test-dir-match "j*r?y"))
(ensure (list (test-dir "jerry/jackson")) (test-dir-match "j*r?y/jackson"))
(ensure (list (test-dir "jerry/jackson/not/jacka"))
        (test-dir-match "j*r?y/**/*a"))
(ensure (list (test-dir "jerry")) (test-dir-match "**/*y"))
(ensure '() (test-dir-match "j*e"))
(ensure '() (test-dir-match "j*x*y"))
(ensure '() (test-dir-match "j?r?e"))
(ensure '() (test-dir-match "j?r??y"))
(ensure '(16) "{$1*$1}[4]")
(ensure '(15) "{$1+$2} ~> $add in $add[5,10]")
(ensure '(15) "5 ~> $x in {$1+$x} ~> $add5 in $add5[10]")
(ensure '(5) "{length($*)}[\"jerry\"]")
(ensure '(5) "{length}[\"jerry\"]")
(ensure '(10) "{*}[2,5]")
(ensure '(5) "{>} ~> $gt in $gt[7,5]")
(ensure '((1 2 3)) "@:(1, (1||2||3))")
(ensure '((1 2 3)) "@:(200, (1||2||3))")
(ensure '((1 2 3)) "1 in @:(%, (1||2||3))")
(ensure '((1 2 3)) "200 ~> $n in @:($n, (1||2||3))")
(ensure '(28) "case [{*}[2,2,7]] of =![$n] -> $n =![$n] when $n < 20 -> $n * $n end")
(ensure '(36) "case [{+}[2,2,2]] of =![$n] -> $n =![$n] when $n < 20 -> $n * $n end")
(ensure '("fizzbuzz") "15 ~> $n in case [$n rem 5, $n rem 3] of >~[0, 0] -> fizzbuzz >~[_, 0] -> fizz >~[0, _] -> buzz >~[_, _] -> $n end")
(ensure '("fizzbuzz") '("=! fb[0, 0] -> fizzbuzz" ">~ fb[_, 0] -> fizz" ">~ fb[0, _] -> buzz" ">~ fb[_, _] -> $n " "15 ~> $n in fb[$n rem 5, $n rem 3]"))
(ensure '(144) "case [3 * 4] of >~[$a] -> case [$a] of >~[$x] -> $x  * $x end >~[$b] -> 28 end")
(ensure '(1 2 3) "1 to 3")
(ensure '(1 3) "1 to 3 by 2")
(ensure '(3 2 1) "3 to 1 by -1")
(ensure '(3 1) "3 to 1 by -2")
(ensure '(1) "1 to 1 by 1")
(ensure '(1) "1 to 1")
(ensure '(1.0) "1.0 to 1.0 by 1.0")
(ensure '(1.0) "1.0 to 1.0")
(ensure '(1 2 3) "from 1 by 1 while % < 4")
(ensure '(1 0 -1) "from 1 by -1 while % > -2")
(ensure '(#\a #\b #\c) "from ?a by 1 while % == ^'abc'")
(ensure '(#\c #\b #\a) "from ?c by -1 while % == ^'abc'")
(ensure '("red" "green" "blue") "case [] of >![] -> red >![] -> green >![] -> blue end")
(ensure '("blue" "red" "green") "case [] of >![] -> red >![] -> green <![] -> blue end")
(ensure '("blue" "red" "green" "blue") "case [] of >![] -> red >![] -> green =![] -> blue || next[] || blue end")
(ensure '("blue" "green" "red" "blue") "case [] of >![] -> red <![] -> green =![] -> blue || next[] || blue end")
(ensure '("blue" "red" "blue") "case [] of >![] -> red >?[] -> green =![] -> blue || next[] || blue end")
(ensure '("blue" "green" "blue") "case [] of >![] -> red <?[] -> green =![] -> blue || next[] || blue end")
(ensure '("foo") "{\"/bin/echo\"}[\"foo\"]")
(ensure '(8) "(loop fib with $a <~ 1, $b <~ 1 -> $a || fib[$b, $a + $b] end) // 5")
;; (ensure '(8)
;;         "loop with $a <~ 1, $b <~ 1 is $a || loop_current[$b, $a + $b] end // 5")
(ensure '((3 5 4)) "[4] ~> $x in [3, 5 . $x]")
(ensure '(#hash(("x" . "2") ("y" . "a"))) "$'(?<$x>.)(?<$y>.)'[\"2a\"]")
(ensure '(#hash(("x" . "2") ("y" . "a"))) "'2' ~> $x in $'(?<$x>.)(?<$y>.)'[\"2a\"]")
(ensure '(#hash(("x" . "2") ("y" . "a"))) "'3' ~> $x in $'(?<$x>.)(?<$y>.)'[\"2a\"]")
(ensure '(#hash(("x" . "2") ("y" . "a"))) "'3' ~> $x in $'(?<x>.)(?<$y>.)'[\"2a\"]")
(ensure '(#hash(("3" . "2") ("y" . "a"))) "'3' ~> $x in $\"(?<$x>.)(?<y>.)\"[\"2a\"]")
(ensure '(#hash(("x" . "2") ("y" . "a"))) "({; (gre \"(?<$x>.)(?<$y>.)\") ;})[\"2a\"]")
(ensure '(-8) "{-} &/ (1||2||3||4)")
(ensure '(12) "{*} &/ (1;(3||4))")
(ensure '(24) "{*} &/ (2;(3||4))")
(ensure '(12) "{*} &/ (3||4)")
(ensure '(0) "{-} &/ (10;(1||2||3||4))")
(ensure '(-8) "{-} &/ (1||2||3||4)")

(ensure '(#(1 2 3) #(2 4 6))
        "&+((1 to 3);(2 to 6 by 2);(3 to 6 by 3))")
(ensure '(#(1 2 3) #(2 4 6) #(3 6 9))
        "&+((1 to 3);(2 to 6 by 2);(3 to 9 by 3))")
(ensure '((1 2 3) (2 4 6))
        "&+[{1 to 3},{2 to 6 by 2},{3 to 6 by 3}]")
(ensure '((1 2 3) (2 4 6) (3 6 9))
        "&+[{1 to 3},{2 to 6 by 2},{3 to 9 by 3}]")
(ensure '(#(1 1)) "&+(1;1)")
(ensure '((1 1)) "&+[{1},{1}]")
(ensure-shell '("abc4") '("foo=4" "echo abc$foo"))
(ensure-shell '("abc") '("foo=4" "echo abc$foo1"))
(ensure-shell '("abc41") '("foo=4" "echo abc${foo}1"))
(ensure-shell '("foo") '(":=! fooit[] -> \"foo\"."
                         "fooit"))
(ensure-shell '("quuxfoo quuxbar") "echo $.(echo quux$[echo $:[foo||bar]])")
(ensure-shell '("this is a test" "that was a test")
              '("echo this is a test > /tmp/echotest"
                "echo that was a test >> /tmp/echotest"
                "cat /tmp/echotest"))
(ensure '("this is a test" "that was a test") "<. '/tmp/echotest'")
(ensure-shell (list (~a (getpid))) "echo $$")
(ensure '("b" "a" "a" "b")
        '("=! wargah[] |> $l -> ^reverse[$l]"
          ">! wargah[] |> $l -> ^$l"
          "(\"a\"||\"b\")|wargah[]"))
(ensure '(28) "{; (* 4 7) ;}")
(ensure '(#hash(("x" . (4)))) "{~>$x}[4]")
(ensure '(#hash(("x" . 4))) "{~>[$x]}[4]")
(ensure (list (hash "x"  4 "y" '(5))) "{~>[$x . $y]}[4, 5]")
(ensure '() "&{1} ~> &{}")
(ensure `(,(set 1)) "&{1} ~> &{...} in %")
(ensure `(,(set 1 2)) "&{1, 2} ~> &{...} in %")
(ensure `(,(set 1 2)) "&{1, 2} ~> &{1, ...} in %")
(ensure `(,(set 1 2)) "&{1, 2} ~> &{2, ...} in %")
(ensure '() "&{1} ~> &{2, ...}")
(ensure '() "&[1=>2] ~> &[]")
(ensure '(#hash((1 . 2))) "&[1=>2] ~> &[...] in %")
(ensure '(#hash((1 . 2) ("3" . "foo"))) "&[1=>2, '3'=>foo] ~> &[...] in %")
(ensure '(#hash((1 . 2) ("3" . "foo")))
        "&[1=>2, '3'=>foo] ~> &[1=>2, ...] in %")
(ensure '(#hash((1 . 2) ("3" . "foo")))
        "&[1=>2, '3'=>foo] ~> &['3'=>_, ...] in %")
(ensure '() "&[1=>2] ~> &['3'=>_, ...]")
(ensure 'error "(5)[0] <- 6")
(ensure '() "([])[0] <- 6")
(ensure '((6 2 3)) "([1,2,3])[0] <- 6")
(ensure '((1 6 3)) "([1,2,3])[1] <- 6")
(ensure '((1 (1 6 3) 3)) "([1,[1,2,3],3])[1,1] <- 6")
(ensure '((1 (1 6 3) 3)) "([1,[1,2,3],3])[-2,-2] <- 6")
(ensure '((1 (1 2 6) 3)) "([1,[1,2,3],3])[-2,-1] <- 6")
(ensure '((1 (6 2 6) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0] <- 6")
(ensure '((1 (6 2 6) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>1] <- [6]")
(ensure '((1 (6 1 2 6) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>0] <- [6]")
(ensure '((1 (6) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>3] <- [6]")
(ensure '((1 (6) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>3] <- &{6}")
(ensure '((1 (6 28) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>3] <- (6,28)")
(ensure `((1 (,(association 6 28)) 3))
        "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>3] <- &[6=>28]")
(ensure '((1 (#\6) 3)) "(([1,[1,2,3],3])[-2,-1] <- 6)[-2, 0=>3] <- '6'")
(ensure 'error "([])[0=>0] <- 6")
(ensure '((6)) "([])[0=>0] <- [6]")
(ensure '() "('')[0] <- ?a")
(ensure 'error "('')[0=>0] <- 6")
(ensure 'error "('')[0=>0] <- ?a")
(ensure '("a") "('')[0=>0] <- [?a]")
(ensure '("abc") "('')[0=>0] <- 'abc'")
(ensure '("623") "('123')[0] <- ?6")
(ensure '("163") "('123')[1] <- ?6")
(ensure '("14963") "('123')[1=>2] <- '496'")
(ensure '("5") "('123')[0=>3] <- '5'")
(ensure '("12345") "('1235')[3=>3] <- '4'")
(ensure '(#hash((1 . 2) (3 . 10))) "(&[1=>2, 3=>4])[3] <- 10")
(ensure '(#hash((1 . 2) (3 . #hash((5 . 28))) (4 . 10)))
        "(&[1=>2,3=>&[5=>6], 4=>10])[3,5] <- 28")
(ensure '(#hash((1 . 2) (3 . #hash((5 . (6 28 496)))) (4 . 10)))
        "(&[1=>2,3=>&[5=>[6]], 4=>10])[3,5,1=>1] <- [28, 496]")

(ensure '() "(())[0] <- 6")
(ensure '(#(6 2 3)) "((1,2,3))[0] <- 6")
(ensure '(#(1 6 3)) "((1,2,3))[1] <- 6")
(ensure '(#(1 #(1 6 3) 3)) "((1,(1,2,3),3))[1,1] <- 6")
(ensure '(#(1 #(1 6 3) 3)) "((1,(1,2,3),3))[-2,-2] <- 6")
(ensure '(#(1 #(1 2 6) 3)) "((1,(1,2,3),3))[-2,-1] <- 6")
(ensure '(#(1 #(6 2 6) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0] <- 6")
(ensure '(#(1 #(6 2 6) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>1] <- [6]")
(ensure '(#(1 #(6 1 2 6) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>0] <- [6]")
(ensure '(#(1 #(6) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>3] <- [6]")
(ensure '(#(1 #(6) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>3] <- &{6}")
(ensure '(#(1 #(6 28) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>3] <- (6,28)")
(ensure `(#(1 #(,(association 6 28)) 3))
        "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>3] <- &[6=>28]")
(ensure '(#(1 #(#\6) 3)) "(((1,(1,2,3),3))[-2,-1] <- 6)[-2, 0=>3] <- '6'")
(ensure 'error "(())[0=>0] <- 6")
(ensure '(#(6)) "(())[0=>0] <- [6]")

(ensure-shell '("foo") '("x=\"foo\"" "echo $x"))
(ensure-shell '("how" "about" "this")
              '("echo \"how\nabout\nthis\" > /tmp/intest"
                "cat < /tmp/intest"))
(ensure-shell '(5) '("x=$:[5]" ":$x."))
(ensure-shell '((5)) '("x=$:(5)" ":$x."))
(ensure-shell '((3 4)) '("x=$:(3||4)" ":$x."))
(ensure-shell '(3) '("x=$:[3||4]" ":$x."))
(ensure (map test-dir2 '("foogolight" "foogot" "golight" "got"))
        (test-dir2-match "*t"))
(ensure-shell (map test-dir2 '("foobad" "foogolight" "foogolightly" "foogot"))
              (list (string-append "tdir2=" test-dir2-base)
                    "/bin/ls ${tdir2}/foo*"))
(ensure-shell '("foogolight" "got")
              (list (string-append "cd " test-dir2-base)
                    "/bin/ls foo$(/bin/ls go*)"))
(ensure-shell '("foogolight" "got")
              (list (string-append "cd " test-dir2-base)
                    "/bin/ls foo$(/bin/ls go*)*"))
(ensure-shell '("foogot" "got")
              (list (string-append "cd " test-dir2-base)
                    "/bin/ls *o[t]*"))
(ensure-shell '("foogolight"  "foogolightly"  "golight")
              (list (string-append "cd " test-dir2-base)
                    "/bin/ls *o[l]*"))
(ensure-shell '(6 28) '("load /Users/jerry/src/github.com/jrryjcksn/gosh/testdata/base.gosh"
                        "load /Users/jerry/src/github.com/jrryjcksn/gosh/testdata/ext.gosh"
                        "bar"))
(ensure-shell '("this is a test" "that was a test")
              '("echo this is a test && echo that was a test"))
(ensure-shell '() '("grep -s xxx /tmp && echo that was a test"))
(ensure-shell '("this is a test")
              '("echo this is a test || echo that was a test"))
(ensure-shell '("that was a test")
              '("grep -s xxx /tmp || echo that was a test"))
(ensure-shell `("that was a test")
              '(":=! flameout[] -> error[foo]."
                "flameout >& /dev/null || echo that was a test"))
(ensure-shell `("foo")
              '(":=! noflameout[] -> foo."
                "noflameout || echo that was a test"))
(ensure-shell '("2") '("grep -s xxx /tmp" "echo $?"))
(ensure-shell '("0") '("echo xxx" "echo $?"))
(ensure-shell '("x") '("echo foo | grep bar || echo x"))
(ensure-shell '() '("echo foo | grep bar && echo x"))
(ensure-shell '("foo" "x") '("echo foo | grep foo && echo x"))
(ensure-shell '("foo" "x") '("error foo |& grep foo && echo x"))
)
